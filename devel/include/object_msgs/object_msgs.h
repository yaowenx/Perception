// Generated by gencpp from file object_msgs/object_msgs.msg
// DO NOT EDIT!


#ifndef OBJECT_MSGS_MESSAGE_OBJECT_MSGS_H
#define OBJECT_MSGS_MESSAGE_OBJECT_MSGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace object_msgs
{
template <class ContainerAllocator>
struct object_msgs_
{
  typedef object_msgs_<ContainerAllocator> Type;

  object_msgs_()
    : header()
    , types()
    , center_x()
    , center_y()
    , edge1_x()
    , edge1_y()
    , edge2_x()
    , edge2_y()  {
    }
  object_msgs_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , types(_alloc)
    , center_x(_alloc)
    , center_y(_alloc)
    , edge1_x(_alloc)
    , edge1_y(_alloc)
    , edge2_x(_alloc)
    , edge2_y(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _types_type;
  _types_type types;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _center_x_type;
  _center_x_type center_x;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _center_y_type;
  _center_y_type center_y;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _edge1_x_type;
  _edge1_x_type edge1_x;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _edge1_y_type;
  _edge1_y_type edge1_y;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _edge2_x_type;
  _edge2_x_type edge2_x;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _edge2_y_type;
  _edge2_y_type edge2_y;




  typedef boost::shared_ptr< ::object_msgs::object_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_msgs::object_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct object_msgs_

typedef ::object_msgs::object_msgs_<std::allocator<void> > object_msgs;

typedef boost::shared_ptr< ::object_msgs::object_msgs > object_msgsPtr;
typedef boost::shared_ptr< ::object_msgs::object_msgs const> object_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_msgs::object_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_msgs::object_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace object_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'object_msgs': ['/home/yaowen/Desktop/ws/Perception/src/object_msgs/src'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::object_msgs::object_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_msgs::object_msgs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_msgs::object_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_msgs::object_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_msgs::object_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_msgs::object_msgs_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_msgs::object_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4168c556534593784663dd7042fab0b2";
  }

  static const char* value(const ::object_msgs::object_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4168c55653459378ULL;
  static const uint64_t static_value2 = 0x4663dd7042fab0b2ULL;
};

template<class ContainerAllocator>
struct DataType< ::object_msgs::object_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_msgs/object_msgs";
  }

  static const char* value(const ::object_msgs::object_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_msgs::object_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
int16[] types\n\
float32[] center_x\n\
float32[] center_y\n\
float32[] edge1_x\n\
float32[] edge1_y\n\
float32[] edge2_x\n\
float32[] edge2_y\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::object_msgs::object_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_msgs::object_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.types);
      stream.next(m.center_x);
      stream.next(m.center_y);
      stream.next(m.edge1_x);
      stream.next(m.edge1_y);
      stream.next(m.edge2_x);
      stream.next(m.edge2_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct object_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_msgs::object_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_msgs::object_msgs_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "types[]" << std::endl;
    for (size_t i = 0; i < v.types.size(); ++i)
    {
      s << indent << "  types[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.types[i]);
    }
    s << indent << "center_x[]" << std::endl;
    for (size_t i = 0; i < v.center_x.size(); ++i)
    {
      s << indent << "  center_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.center_x[i]);
    }
    s << indent << "center_y[]" << std::endl;
    for (size_t i = 0; i < v.center_y.size(); ++i)
    {
      s << indent << "  center_y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.center_y[i]);
    }
    s << indent << "edge1_x[]" << std::endl;
    for (size_t i = 0; i < v.edge1_x.size(); ++i)
    {
      s << indent << "  edge1_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.edge1_x[i]);
    }
    s << indent << "edge1_y[]" << std::endl;
    for (size_t i = 0; i < v.edge1_y.size(); ++i)
    {
      s << indent << "  edge1_y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.edge1_y[i]);
    }
    s << indent << "edge2_x[]" << std::endl;
    for (size_t i = 0; i < v.edge2_x.size(); ++i)
    {
      s << indent << "  edge2_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.edge2_x[i]);
    }
    s << indent << "edge2_y[]" << std::endl;
    for (size_t i = 0; i < v.edge2_y.size(); ++i)
    {
      s << indent << "  edge2_y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.edge2_y[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_MSGS_MESSAGE_OBJECT_MSGS_H
